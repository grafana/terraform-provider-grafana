// Copyright 2020 Grafana Labs
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package synthetic_monitoring;

option go_package = "synthetic_monitoring";

import "gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;

service Checks {
	// RegisterProbe causes this probe to be reported as online with
	// synthetic-monitoring-api.
	//
	// The probe is identified via an authentication token provided
	// through a different channel by synthetic-monitoring-api.
	rpc RegisterProbe(ProbeInfo) returns (RegisterProbeResult) {};

	// GetChanges returns a list of check operations, specifying
	// whether to add, update or delete checks.
	rpc GetChanges(Void) returns (stream Changes) {};
}

// Void is an empty message used by RPC methods that don't take
// arguments.
message Void {
}

message ProbeInfo {
	string Version    = 1 [(gogoproto.jsontag) = "version"];     // version of the probe
	string Commit     = 2 [(gogoproto.jsontag) = "commit"];      // commit hash used to build the probe
	string Buildstamp = 3 [(gogoproto.jsontag) = "buildstamp"];  // timestamp when the probe was built
}

// StatusCode represents the result of registering a probe with the API.
enum StatusCode {
	OK               = 0;
	NOT_FOUND        = 1;
	INVALID_ARGUMENT = 2;
	ALREADY_EXISTS   = 3;
	INTERNAL_ERROR   = 4;
	NOT_AUTHORIZED   = 5;
}

// Status represents the result of registering a probe with the API,
// including both a code as well as textual message that can be
// presented to the user.
message Status {
	StatusCode code    = 1;
	string     message = 2;
}

// RegisterProbeResult is the message returned by the RegisterProbe
// method of the Checks service. It provides both the status of the
// operation and the probe's details after successful registration.
message RegisterProbeResult {
	Probe  probe  = 1 [(gogoproto.nullable) = false];
	Status status = 2 [(gogoproto.nullable) = false];
}

// Probe represents a probe.
message Probe {
	int64          id           = 1 [(gogoproto.jsontag) = "id"];                                   // ID of the probe, assigned by the API
	int64          tenantId     = 2 [(gogoproto.jsontag) = "tenantId"];                             // ID of the synthetic-monitoring tenant this probe belongs to
	string         name         = 3 [(gogoproto.jsontag) = "name"];                                 // name of the probe
	float          latitude     = 4 [(gogoproto.jsontag) = "latitude"];                             // latitude of the probe
	float          longitude    = 5 [(gogoproto.jsontag) = "longitude"];                            // longitude of the probe
	repeated Label labels       = 6 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "labels"]; // probe-specific labels applied to all metrics and events
	string         region       = 7 [(gogoproto.jsontag) = "region"];                               // region of the probe, such as AMER, EMEA, APAC
	bool           public       = 8 [(gogoproto.jsontag) = "public"];                               // whether the probe is private or shared with all users
	bool           online       = 9 [(gogoproto.jsontag) = "online"];                               // whether the probe is currently online
	double         onlineChange = 10 [(gogoproto.jsontag) = "onlineChange"];                        // time probe started or stopped being online
	string         version      = 11 [(gogoproto.jsontag) = "version"];                             // version of the probe
	string         commit       = 12 [(gogoproto.jsontag) = "commit"];                              // commit hash used to build the probe
	string         buildstamp   = 13 [(gogoproto.jsontag) = "buildstamp"];                          // timestamp when the probe was built
	double         created      = 100 [(gogoproto.jsontag) = "created"];                            // time the probe was created
	double         modified     = 101 [(gogoproto.jsontag) = "modified"];                           // last time modified
}

service Tenants {
	// GetTenant returns the details of the specified tenant
	rpc GetTenant(TenantInfo) returns (Tenant) {};
}

// TenantInfo identifies the tenant for which information is being
// requeted via the GetTenant method of the Tenants service.
message TenantInfo {
	int64 id = 1;
}

// TenantStatus represents the status associated to particular tenant.
enum TenantStatus {
	ACTIVE   = 0;
	DISABLED = 1;
}

// Tenant represents a user of synthetic-monitoring.
message Tenant {
	int64           id            = 1   [(gogoproto.jsontag) = "id"];            // unique ID
	int64           orgId         = 2   [(gogoproto.jsontag) = "orgId"];         // grafana.com orgId
	RemoteInfo      metricsRemote = 3   [(gogoproto.jsontag) = "metricsRemote"]; // target to send metrics to
	RemoteInfo      eventsRemote  = 4   [(gogoproto.jsontag) = "eventsRemote"];  // target to send events to
	int64           stackId       = 5   [(gogoproto.jsontag) = "stackId"];       // grafana.com stackId
	TenantStatus    status        = 6   [(gogoproto.jsontag) = "status"];        // tenant status
	string          reason        = 7   [(gogoproto.jsontag) = "reason"];        // reason provided for the status

	double          created       = 100 [(gogoproto.jsontag) = "created"];       // time the check was created
	double          modified      = 101 [(gogoproto.jsontag) = "modified"];      // last time modified
}

// RemoteInfo represents an instance of the Prometheus remote write
// service to send metrics or events to.
message RemoteInfo {
	string name     = 1 [(gogoproto.jsontag) = "name"];     // instance name
	string url      = 2 [(gogoproto.jsontag) = "url"];      // instance URL
	string username = 3 [(gogoproto.jsontag) = "username"]; // username (instanceId)
	string password = 4 [(gogoproto.jsontag) = "password"]; // password (publisher API key)
}

// CheckOperation represents an operation to be performed on a
// particular check.
enum CheckOperation {
	CHECK_ADD    = 0;
	CHECK_UPDATE = 1;
	CHECK_DELETE = 2;
}

// CheckChange represents one change operation for a given check.
message CheckChange {
	CheckOperation operation = 1;
	Check          check     = 2 [(gogoproto.nullable) = false];
}

// Changes represents a series of changes to be applied to the workloads
// running on the probe.
//
// When a probe connects, it will get a sequence of changes describing
// all the checks associated to that probe. After the initial batch, it
// will continue getting changes as they happen.
//
// When a tenant's credentials change, this message will contain the new
// information for that tenant.
message Changes {
	repeated CheckChange checks  = 1 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "checks"];
	repeated Tenant      tenants = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "tenants"];
}

// Label represents a single label in synthetic monitoring. These are
// applied to the resulting metrics and logs.
message Label {
	string name  = 1 [(gogoproto.jsontag) = "name"];
	string value = 2 [(gogoproto.jsontag) = "value"];
}

// Check represents a check.
//
// The "settings" field defines the type of check.
message Check {
	int64           id               = 1   [(gogoproto.jsontag) = "id"];                                     // unique ID
	int64           tenantId         = 2   [(gogoproto.jsontag) = "tenantId"];                               // synthetic-monitoring tenant
	int64           frequency        = 3   [(gogoproto.jsontag) = "frequency"];                              // every X milliseconds
	int64           offset           = 4   [(gogoproto.jsontag) = "offset"];                                 // ??? REMOVE???? ??? why user configured?
	int64           timeout          = 5   [(gogoproto.jsontag) = "timeout"];                                // maximum time before aborting
	bool            enabled          = 6   [(gogoproto.jsontag) = "enabled"];                                // user enable/disable   
	repeated Label  labels           = 7   [(gogoproto.nullable) = false, (gogoproto.jsontag) = "labels"];   // custom labels applied to all metrics and events (ie: production)
	CheckSettings   settings         = 8   [(gogoproto.nullable) = false, (gogoproto.jsontag) = "settings"]; // check-specific settings
	repeated int64  probes           = 9   [(gogoproto.jsontag) = "probes"];                                 // list of probes where this check should run
	string          target           = 10  [(gogoproto.jsontag) = "target"];                                 // endpoint that this check is targeting
	string          job              = 11  [(gogoproto.jsontag) = "job"];                                    // name of job this check belongs to
	bool            basicMetricsOnly = 12  [(gogoproto.jsontag) = "basicMetricsOnly"];                       // include only basic metrics
	string          alertSensitivity = 13  [(gogoproto.jsontag) = "alertSensitivity"];

	double          created          = 100 [(gogoproto.jsontag) = "created"];                                // time the check was created
	double          modified         = 101 [(gogoproto.jsontag) = "modified"];                               // last time modified
}

// CheckSettings provides the settings for exactly one type of check.
message CheckSettings {
	option (gogoproto.onlyone) = true;
	PingSettings ping = 1 [(gogoproto.jsontag) = "ping,omitempty"];
	HttpSettings http = 2 [(gogoproto.jsontag) = "http,omitempty"];
	DnsSettings  dns  = 3 [(gogoproto.jsontag) = "dns,omitempty"];
	TcpSettings  tcp  = 4 [(gogoproto.jsontag) = "tcp,omitempty"];
}

// PingSettings provides the settings for a ping check.
message PingSettings {
	IpVersion  ipVersion       = 1 [(gogoproto.jsontag) = "ipVersion"];                 // IP version used in the IP layer
	string     sourceIpAddress = 2 [(gogoproto.jsontag) = "sourceIpAddress,omitempty"]; // source IP address for the packets
	int64      payloadSize     = 3 [(gogoproto.jsontag) = "payloadSize,omitempty"];     // size of the ICMP packet's data portion
	bool       dontFragment    = 4 [(gogoproto.jsontag) = "dontFragment"];              // set the IP "don't fragment" option
}

// HttpMethod represents the HTTP method used when making HTTP requests.
enum HttpMethod {
	GET     = 0;
	CONNECT = 1;
	DELETE  = 2;
	HEAD    = 3;
	OPTIONS = 4;
	POST    = 5;
	PUT     = 6;
	TRACE   = 7;
}

// HttpSettings provides the settings for a HTTP check.
message HttpSettings {
	IpVersion             ipVersion                    = 1   [(gogoproto.jsontag) = "ipVersion"];
	HttpMethod            method                       = 2   [(gogoproto.jsontag) = "method"];
	repeated string       headers                      = 3   [(gogoproto.jsontag) = "headers,omitempty"];
	string                body                         = 4   [(gogoproto.jsontag) = "body,omitempty"];
	bool                  noFollowRedirects            = 5   [(gogoproto.jsontag) = "noFollowRedirects"];

	// client config

	TLSConfig             tlsConfig                    = 100 [(gogoproto.jsontag) = "tlsConfig,omitempty"];
	BasicAuth             basicAuth                    = 101 [(gogoproto.jsontag) = "basicAuth,omitempty"];
	string                bearerToken                  = 102 [(gogoproto.jsontag) = "bearerToken,omitempty"];
	string                proxyURL                     = 103 [(gogoproto.jsontag) = "proxyURL,omitempty"];

	// validations

	bool                  failIfSSL                    = 200 [(gogoproto.jsontag) = "failIfSSL"];
	bool                  failIfNotSSL                 = 201 [(gogoproto.jsontag) = "failIfNotSSL"];
	repeated int32        validStatusCodes             = 202 [(gogoproto.jsontag) = "validStatusCodes,omitempty"];
	repeated string       validHTTPVersions            = 203 [(gogoproto.jsontag) = "validHTTPVersions,omitempty"];
	repeated string       failIfBodyMatchesRegexp      = 204 [(gogoproto.jsontag) = "failIfBodyMatchesRegexp,omitempty"];
	repeated string       failIfBodyNotMatchesRegexp   = 205 [(gogoproto.jsontag) = "failIfBodyNotMatchesRegexp,omitempty"];
	repeated HeaderMatch  failIfHeaderMatchesRegexp    = 206 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "failIfHeaderMatchesRegexp,omitempty"];
	repeated HeaderMatch  failIfHeaderNotMatchesRegexp = 207 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "failIfHeaderNotMatchesRegexp,omitempty"];
	CompressionAlgorithm  compression                  = 208 [(gogoproto.jsontag) = "compression,omitempty"];

	// custom settings not present in blackbox-exporter

	string                cacheBustingQueryParamName   = 900 [(gogoproto.jsontag) = "cacheBustingQueryParamName,omitempty"];
}

// HeaderMatch represents a single header that must match in order for
// the check to be considered successful.
message HeaderMatch {
	string header       = 1 [(gogoproto.jsontag) = "header,omitempty"];       // the header to match
	string regexp       = 2 [(gogoproto.jsontag) = "regexp,omitempty"];       // a regular expression to match against the header's value
	bool   allowMissing = 3 [(gogoproto.jsontag) = "allowMissing,omitempty"]; // consider the match successful if the header is absent
}

// DnsRecordType represents the DNS record types to be queried in DNS
// checks.
enum DnsRecordType {
	ANY   = 0;
	A     = 1;
	AAAA  = 2;
	CNAME = 3;
	MX    = 4;
	NS    = 5;
	PTR   = 6;
	SOA   = 7;
	SRV   = 8;
	TXT   = 9;
}

// DnsProtocol represents the IP protocol to use for DNS queries.
enum DnsProtocol {
	TCP = 0;
	UDP = 1;
}

// DNSRRValidator represents the DNS resource record validations.
message DNSRRValidator {
	repeated string failIfMatchesRegexp    = 1 [(gogoproto.jsontag) = "failIfMatchesRegexp,omitempty"];
	repeated string failIfNotMatchesRegexp = 2 [(gogoproto.jsontag) = "failIfNotMatchesRegexp,omitempty"];
}

// DnsSettings provides the settings for a DNS check.
//
// The way blackbox-exporter works, a DNS check tests a _server_, so the
// _target_ of the check is a server address, and the check itself
// contains the record to check.
//
// "ipVersion" is the IP version to use in the IP layer.
message DnsSettings {
	IpVersion        ipVersion          = 1  [(gogoproto.jsontag) = "ipVersion"];
	string           sourceIpAddress    = 2  [(gogoproto.jsontag) = "sourceIpAddress,omitempty"];
	string           server             = 3  [(gogoproto.jsontag) = "server"];
	int32            port               = 4  [(gogoproto.jsontag) = "port"];
	DnsRecordType    recordType         = 5  [(gogoproto.jsontag) = "recordType"];
	DnsProtocol      protocol           = 6  [(gogoproto.jsontag) = "protocol"];

	// validations

	repeated string  validRCodes        = 200 [(gogoproto.jsontag) = "validRCodes,omitempty"];
	DNSRRValidator   validateAnswer     = 201 [(gogoproto.jsontag) = "validateAnswerRRS,omitempty"];
	DNSRRValidator   validateAuthority  = 202 [(gogoproto.jsontag) = "validateAuthorityRRS,omitempty"];
	DNSRRValidator   validateAdditional = 203 [(gogoproto.jsontag) = "validateAditionalRRS,omitempty"];
}

// TcpSettings provides the settings for a TCP check.
//
// "ipVersion" is the IP version to use in the IP layer.
message TcpSettings {
	IpVersion                 ipVersion       = 1 [(gogoproto.jsontag) = "ipVersion"];
	string                    sourceIpAddress = 2 [(gogoproto.jsontag) = "sourceIpAddress,omitempty"];
	bool                      tls             = 3 [(gogoproto.jsontag) = "tls,omitempty"];
	TLSConfig                 tlsConfig       = 4 [(gogoproto.jsontag) = "tlsConfig,omitempty"];
	repeated TCPQueryResponse queryResponse   = 5 [(gogoproto.jsontag) = "queryResponse,omitempty", (gogoproto.nullable) = false];
}

// TCPQueryResponse represents a single step in a sequence of
// send/expect pairs to be used when connecting to a generic TCP
// service.
message TCPQueryResponse {
	bytes send     = 1 [(gogoproto.jsontag) = "send"];
	bytes expect   = 2 [(gogoproto.jsontag) = "expect"];
	bool  startTLS = 3 [(gogoproto.jsontag) = "startTLS,omitempty"];
}

// IpVersion represents the version of the IP protocol to be used in
// checks.
enum IpVersion {
	Any = 0; // use IPv6 if supported and fall back to IPv4 otherwise
	V4  = 1; // use IPv4 only
	V6  = 2; // use IPv6 only
}

// CompressionAlgorithm represents the compression algorithm to use.
enum CompressionAlgorithm {
	none     = 0; // no compression algorithm
	identity = 1; // no compression, passthru
	gzip     = 2; // gzip
	br       = 3; // br, brotli
	deflate  = 4; // deflate
}

// TLSConfig represents the TLS data to be used when establishing a
// secure connection in the protocols that support it.
message TLSConfig {
	bool   insecureSkipVerify = 1 [(gogoproto.jsontag) = "insecureSkipVerify,omitempty"];
	bytes  CACert             = 2 [(gogoproto.jsontag) = "caCert,omitempty"];
	bytes  clientCert         = 3 [(gogoproto.jsontag) = "clientCert,omitempty"];
	bytes  clientKey          = 4 [(gogoproto.jsontag) = "clientKey,omitempty"];
	string serverName         = 5 [(gogoproto.jsontag) = "serverName,omitempty"];
}

// BasicAuth represents the basic authentication credentials to be used
// when talking to HTTP servers.
message BasicAuth {
	string username = 1 [(gogoproto.jsontag) = "username,omitempty"];
	string password = 2 [(gogoproto.jsontag) = "password,omitempty"];
}
