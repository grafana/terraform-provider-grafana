local grafanaVersions = ['10.1.2', '10.0.6', '9.5.10'];

local checkoutStep = {
  name: 'Checkout',
  uses: 'actions/checkout@v4',
};

local installTerraformStep = {
  name: 'Install Terraform',
  uses: 'hashicorp/setup-terraform@v2',
  with: {
    terraform_wrapper: false,
  },
};

local testStep(target, version, env={}) = {
  name: 'Run tests',
  run: 'make ' + target,
  env: {
    GRAFANA_VERSION: version,
  } + env,
};

local localInstanceTestJob(name, version, target='testacc-oss') = {
  name: name,
  'runs-on': 'ubuntu-latest',
  services: {
    grafana: {
      image: 'grafana/grafana:%s' % version,
      ports: ['3000:3000'],
      options: '--health-cmd="curl -f http://localhost:3000/api/health || exit 1" --health-retries=10 --health-interval=10s',
    },
  },
  steps: [
    checkoutStep,
    installTerraformStep,
    testStep(target, version, env={
      GRAFANA_AUTH: 'admin:admin',
      GRAFANA_URL: 'http://localhost:3000/',
    }),
  ],
};

local testsWorkflow = {
  name: 'tests',
  on: {
    pull_request: {
      branches: ['master', 'main'],
    },
    push: {
      branches: ['master', 'main'],
    },
  },

  jobs:
    // OSS tests
    {
      ['oss_%s' % std.strReplace(version, '.', '_')]: localInstanceTestJob('OSS: %s' % version, version)
      for version in grafanaVersions
    }

    // OSS long-running tests
    + {
      ['oss_long_%s' % std.strReplace(version, '.', '_')]: localInstanceTestJob('OSS Long-Running: %s' % version, version, target='testacc-oss-long')
      for version in grafanaVersions
    }


    // Run tests behind TLS proxy
    + {
      tls_proxy: localInstanceTestJob(name='TLS Proxy', version=grafanaVersions[0]),
    },

  // Enterprise tests

  // Cloud API tests

  // Cloud instance tests

};

// Generate with `make github-actions`
local workflowsPath = if std.member(std.thisFile, '/') then std.splitLimitR(std.thisFile, '/', 1)[0] + '/workflows' else 'workflows';
local header = '# GENERATED BY %s. DO NOT MODIFY MANUALLY\n' % std.thisFile;
{
  [workflowsPath + '/tests.yml']: header + std.manifestYamlDoc(testsWorkflow, quote_keys=false),
}
