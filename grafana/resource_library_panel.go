package grafana

import (
	"context"
	"encoding/json"
	"fmt"
	"strconv"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	gapi "github.com/justinTM/grafana-api-golang-client"
)

func ResourceLibraryPanel() *schema.Resource {
	return &schema.Resource{

		Description: `
Manages Grafana library panels.

* [Official documentation](https://grafana.com/docs/grafana/latest/panels/panel-library/)
* [HTTP API](https://grafana.com/docs/grafana/latest/http_api/library_element/)
`,

		CreateContext: CreateLibraryPanel,
		ReadContext:   ReadLibraryPanel,
		UpdateContext: UpdateLibraryPanel,
		DeleteContext: DeleteLibraryPanel,
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},

		Schema: map[string]*schema.Schema{
			"uid": {
				Type:        	schema.TypeString,
				Computed: 	 	true,
				Description: 	"The unique identifier (UID) of a library panel uniquely identifies library panels between multiple Grafana installs. " +
					"Itâ€™s automatically generated unless you specify it during library panel creation." +
					"The UID provides consistent URLs for accessing library panels and when syncing library panels between multiple Grafana installs.",
			},
			"panel_id": {
				Type:        	schema.TypeInt,
				Computed:    	true,
				Description: 	"The numeric ID of the library panel computed by Grafana.",
			},
			"name": {
				Type:     	 	schema.TypeString,
				Required:    	true,
				Description: 	"Name of the library panel.",
			},
			"folder": {
				Type:        	schema.TypeInt,
				Required:    	true,
				ForceNew:    	true,
				Description: 	"ID of the folder where the library panel is stored.",
			},
			"config_json": {
				Type:         schema.TypeString,
				Required:     true,
				StateFunc:    normalizeLibraryPanelConfigJSON,
				ValidateFunc: validateLibraryPanelConfigJSON,
				Description:  "The JSON model for the library panel.",
			},
		},
	}
}

func CreateLibraryPanel(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	client := meta.(*client).gapi
	panel := makeLibraryPanel(d)
	resp, err := client.NewLibraryPanel(panel)
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(resp.UID)
	d.Set("uid", resp.UID)
	return ReadLibraryPanel(ctx, d, meta)
}

func ReadLibraryPanel(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	client := meta.(*client).gapi
	uid := d.Id()
	panel, err := client.LibraryPanelByUID(uid)
	var diags diag.Diagnostics
	if err != nil {
		if strings.HasPrefix(err.Error(), "status: 404") {
			diags = append(diags, diag.Diagnostic{
				Severity: diag.Warning,
				Summary:  fmt.Sprintf("Dashboard %q is in state, but no longer exists in grafana", uid),
				Detail:   fmt.Sprintf("%q will be recreated when you apply", uid),
			})
			d.SetId("")
			return diags
		} else {
			return diag.FromErr(err)
		}
	}

	d.SetId(panel.Model["uid"].(string))
	d.Set("uid", panel.Model["uid"].(string))
	d.Set("panel_id", panel.Id)
	d.Set("name", panel.Name)
	d.Set("folder", panel.Folder)

	configJSONBytes, err := json.Marshal(panel.Model)
	if err != nil {
		return diag.FromErr(err)
	}
	remotePanelJSON, err := unmarshalLibraryPanelConfigJSON(string(configJSONBytes))
	if err != nil {
		return diag.FromErr(err)
	}

	// If `uid` is not set in configuration, we need to delete it from the
	// library panel JSON we just read from the Grafana API. This is so it does not
	// create a diff. We can assume the uid was randomly generated by Grafana or
	// it was removed after library panel creation. In any case, the user doesn't
	// care to manage it.
	if configJSON := d.Get("config_json").(string); configJSON != "" {
		configuredPanelJSON, err := unmarshalLibraryPanelConfigJSON(configJSON)
		if err != nil {
			return diag.FromErr(err)
		}
		if _, ok := configuredPanelJSON["uid"].(string); !ok {
			delete(remotePanelJSON, "uid")
		}
	}

	configJSON := normalizeLibraryPanelConfigJSON(remotePanelJSON)
	d.Set("config_json", configJSON)

	return diags
}

func UpdateLibraryPanel(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	client := meta.(*client).gapi
	panel := makeLibraryPanel(d)
	panel.Model["id"] = d.Get("panel_id").(int)
	panel.Overwrite = true
	resp, err := client.NewLibraryPanel(panel)
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(resp.UID)
	d.Set("uid", resp.UID)
	return ReadLibraryPanel(ctx, d, meta)
}

func DeleteLibraryPanel(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	client := meta.(*client).gapi
	uid := d.Id()
	err := client.DeleteLibraryPanelByUID(uid)
	var diags diag.Diagnostics
	if err != nil && !strings.HasPrefix(err.Error(), "status: 404") {
		return diag.FromErr(err)
	}
	return diags
}

func makeLibraryPanel(d *schema.ResourceData) gapi.LibraryPanel {
	panel := gapi.LibraryPanel{
		Kind: 1  // library panels are 1, library variables are 2
		Folder: int64(d.Get("folder").(int)),
		Name: int64(d.Get("name").(int)),
	}
	configJSON := d.Get("config_json").(string)
	panelJSON, err := unmarshalLibraryPanelConfigJSON(configJSON)
	if err != nil {
		return panel
	}
	delete(panelJSON, "id")
	delete(panelJSON, "version")
	panel.Model = panelJSON
	return panel
}

// unmarshalLibraryPanelConfigJSON is a convenience func for unmarshalling
// `config_json` field.
func unmarshalLibraryPanelConfigJSON(configJSON string) (map[string]interface{}, error) {
	panelJSON := map[string]interface{}{}
	err := json.Unmarshal([]byte(configJSON), &panelJSON)
	if err != nil {
		return nil, err
	}
	return panelJSON, nil
}

// validateLibraryPanelConfigJSON is the ValidateFunc for `config_json`. It
// ensures its value is valid JSON.
func validateLibraryPanelConfigJSON(config interface{}, k string) ([]string, []error) {
	configJSON := config.(string)
	configMap := map[string]interface{}{}
	err := json.Unmarshal([]byte(configJSON), &configMap)
	if err != nil {
		return nil, []error{err}
	}
	return nil, nil
}

// normalizeLibraryPanelConfigJSON is the StateFunc for the `config_json` field.
//
// It removes the following fields:
//
// * `id`:      an auto-incrementing ID Grafana assigns to library panels upon
//              creation. We cannot know this before creation and therefore it cannot
//              be managed in code.
// * `version`: is incremented by Grafana each time a library panel changes.
func normalizeLibraryPanelConfigJSON(config interface{}) string {
	var panelJSON map[string]interface{}
	switch c := config.(type) {
	case map[string]interface{}:
		panelJSON = c
	case string:
		var err error
		panelJSON, err = unmarshalLibraryPanelConfigJSON(c)
		if err != nil {
			return c
		}
	}
	delete(panelJSON, "id")
	delete(panelJSON, "version")
	j, _ := json.Marshal(panelJSON)
	return string(j)
}
